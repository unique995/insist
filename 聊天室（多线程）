class ReadFromServer implements Runnable{
    private Socket client;

    public ReadFromServer(Socket client) {
        this.client = client;
    }

    @Override
    public void run() {
        //获取客户端输入流
        Scanner in = null;
        try {
            in = new Scanner(client.getInputStream());
            while(true){
                if(in.hasNext()){
                    System.out.println("服务器发来消息："+in.nextLine());
                }
                if(client.isClosed()){
                    System.out.println("此客户端关闭");
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            in.close();
        }
    }
}
class WriteToServer implements Runnable{
    private Socket client;

    public WriteToServer(Socket client) {
        this.client = client;
    }
    @Override
    public void run() {
        PrintStream out = null;
        //键盘输入
        Scanner in = new Scanner(System.in);
        in.useDelimiter("\n");
        try {
            // 获取客户端输出流
            out = new PrintStream(client.getOutputStream());
            while (true){
                System.out.println("请输入要发送的消息：");
                String strToServer;
                if(in.hasNextLine()){
                    strToServer = in.nextLine();
                    out.println(strToServer);//发给服务器线程
                    // 客户端退出标志
                    if(strToServer.equals("byebye")){
                        System.out.println("关闭客户端");
                        break;
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            in.close();
            out.close();
            try {
                client.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
public class MutiThreadClient {
    public static void main(String[] args) {
        try {
            Socket cilent = new Socket("127.0.0.1",6666);
            Thread readFromServer = new Thread(new ReadFromServer(cilent));
            Thread writeToServer = new Thread(new WriteToServer(cilent));
            readFromServer.start();
            writeToServer.start();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}






public class MutiThreadServer {
    //存储所有注册的客户端
    private static Map<String,Socket> clientMap = new ConcurrentHashMap<String, Socket>();

    //具体处理与每个客户端通信
    private static class ExecuteClient implements Runnable{
        private Socket client;

        public ExecuteClient(Socket client) {
            this.client = client;
        }

        @Override
        public void run() {
            try {
                //获取客户端的输入流
                Scanner in = new Scanner(client.getInputStream());
                String strFromClient;
                while(true){
                    if(in.hasNextLine()){
                        strFromClient = in.nextLine();
                        //windows下的换行/r/n中的/r替换成空字符串
                        Pattern pattern = Pattern.compile("/r");
                        Matcher matcher = pattern.matcher(strFromClient);
                        strFromClient = matcher.replaceAll("");
                        //注册流程
                        if(strFromClient.startsWith("userName")){
                            String userName = strFromClient.split("\\:")[1];
                            registerUser(userName,client);
                            continue;
                        }
                        //群聊
                        if(strFromClient.startsWith("G")){
                            String msg = strFromClient.split("\\:")[1];
                            groupChat(msg);
                            continue;
                        }
                        //私聊
                        if(strFromClient.startsWith("P")){
                            String userName = strFromClient.split("\\:")[1].split("\\:-")[0];
                            String msg = strFromClient.split("\\:")[1].split("\\-")[1];
                            privateChat(userName,msg);
                           // continue;
                        }
                        //退出
                        if(strFromClient.contains("byebye")){
                            String userName = null;
                            //根据Socket找到userName

                        }
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        //注册方法
        private void registerUser(String userName,Socket client){
            System.out.println("用户名为："+userName);
            System.out.println("用户"+userName+"上线了");
            System.out.println("当前群聊人数为："+(clientMap.size()+1)+"人");
            //将用户信息保存在map中
            clientMap.put(userName,client);
            try {
                PrintStream out = new PrintStream(client.getOutputStream(),true,"UTF-8");
                //告知用户注册成功
                out.println("用户注册成功");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        //群聊流程
        private void groupChat(String msg){
            //取出clientMap中所有Entry遍历发送群聊信息
            Set<Map.Entry<String,Socket>> clientSet = clientMap.entrySet();
            for (Map.Entry<String,Socket> entry:clientSet) {
                Socket socket = entry.getValue();
                try {
                    PrintStream out = new PrintStream(socket.getOutputStream(),true,"UTF-8");
                    out.println("群聊信息为"+msg);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        //私聊流程
        private void privateChat(String userName,String msg){
            Socket privateSocket = clientMap.get(userName);
            try {
                PrintStream out = new PrintStream(privateSocket.getOutputStream(),true,"UTF-8");
                out.println("私聊信息为："+msg);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    public static void main(String[] args) {

    }
}
