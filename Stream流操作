Stream 是用函数式编程方式在集合类上进行复杂操作的工具，
其集成了Java 8中的众多新特性之一的聚合操作，
开发者可以更容易地使用Lambda表达式，并且更方便地实现对集合的查找、遍历、过滤以及常见计算等。
首先，通过stream方法创建Stream，然后再通过filter方法对源数据进行过滤

//1
public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        Collections.addAll(list,"java","C++","Python","PHP");
        //实例化对象
        Stream<String> stream = list.stream();
        //统计带有java的个数
        通过filter方法对源数据进行过滤
        System.out.println(stream.filter((e)->e.contains("java")).count());
    }                           filter中的test方法返回true代表当前元素会保留下来。
    
    
//2    
public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        Collections.addAll(list,"java","C++","Python","PHP");
        //实例化对象
        Stream<String> stream = list.stream();
        //收集过滤后的数据
       // System.out.println(stream.filter((e)->e.contains("java")).collect(Collectors.toList()));
    List<String> resultList = stream.filter((e)->e.contains("java")).collect(Collectors.toList());
        System.out.println(resultList);
   
   }  
   
   
   //3
   //跳过0个，取1个
   public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        Collections.addAll(list,"java","C++","Python","PHP");
        //实例化对象
        Stream<String> stream = list.stream();
        List<String> resultList = stream.skip(0).limit(1).map((s)->s.toUpperCase()).collect(Collectors.toList());
        System.out.println(resultList);
    }
