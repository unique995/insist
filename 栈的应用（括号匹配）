#if 0
int IsBrackets(char ch)
{
	if(('(' == ch || ')' == ch)||
	   ('[' == ch || ']' == ch)||
	   ('{' == ch ||'}' ==ch))
	{
		return 1;
	}
	return 0;
}
void MatchBrackets(const char* str)
{
	//char ch;
	Stack s;
	int i = 0;
	int size = 0;
	if(str == NULL)
	{
		return;
	}
	StackInit(&s);
	size = strlen(str);
	for(i=0;i<size;++i)
	{
		if(IsBrackets(str[i]))
		{
			//当前为左括号
			if(str[i] == '(' || str[i] == '[' || str[i] == '{')
				StackPush(&s,str[i]);
			else
			{
				//为右括号
				char ch;
				if(StackEmpty(&s))
				{
					printf("右括号比左括号多!\n");
					return;
				}
				//检测当前括号是否与栈顶括号匹配
				ch = StackTop(&s);

				if(!(('(' == ch && ')' == str[i])||
				   ('[' == ch && ']' == str[i])||
				   ('{' == ch && '}' == str[i])))
				{
					printf("左右括号次序匹配错误!\n");
					return;
				}
				StackPop(&s);
			}
		}
	}
	if(StackEmpty(&s))
		printf("括号匹配正确！\n");
	else
		printf("左括号比右括号多！\n");
}
#endif
