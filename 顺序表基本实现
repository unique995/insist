


void InitSeqList(PSeqList pSeq)//初始化
{
	assert(pSeq != NULL);

	pSeq->sz = 0;
	memset(pSeq->data,0,sizeof(pSeq->data));//memset函数初始化每个字节
}

void PushBack(PSeqList pSeq, DataType data)//尾部插入 
{
	//插入时，判断是否已满
	assert(pSeq != NULL);
	if(pSeq->sz == MAX)
	{
		printf("顺序表已满，不能插入!\n");
		return ;
	}
	pSeq->data[pSeq->sz]=data;
	pSeq->sz++;

}
void PopBack(PSeqList pSeq)//尾部删除
{
	if(pSeq->sz == 0)
	{
		printf("顺序表为空，无法操作！\n");
		return ;
	}
	pSeq->sz--;
}

void PushFront(PSeqList pSeq, DataType data)//头部插入
{
	int i = 0;
	assert(pSeq != NULL);
	if(pSeq->sz == MAX)
	{
		printf("顺序表已满，不能插入!\n");
		return ;
	}
	for(i=pSeq->sz-1;i>=0;i--)
	{
		pSeq->data[i+1]=pSeq->data[i];
	}
	pSeq->data[0]=data;
	pSeq->sz++;
}

void PopFront(PSeqList pSeq)//头部删除
{
	int i = 0;
	assert(pSeq != NULL);
	if(pSeq->sz == 0)
	{
		printf("顺序表为空，无法操作！\n");
		return ;
	}
	for(i=0;i<pSeq->sz-1;i++)
	{
		pSeq->data[i]=pSeq->data[i+1];
	}
    pSeq->sz--;
}

int Find(PSeqList pSeq, DataType data)//查找指定元素
{
	int i = 0;
	assert(pSeq != NULL);
	if(pSeq->sz == 0)
	{
		printf("顺序表为空，无法操作！\n");
		return 0;
	}
	for(i=0;i<pSeq->sz-1;i++)
	{
		if(pSeq->data[i]==data)
			return i;
	}
	return -1;
}

void Insert(PSeqList pSeq, int pos, DataType data)//指定位置插入
{
	int i = 0;
	assert(pSeq != NULL);
	if(pSeq->sz == MAX)
	{
		printf("顺序表已满，不能插入!\n");
		return ;
	}
	for(i=pSeq->sz-1;i>=pos;i--)
	{
		pSeq->data[i+1]=pSeq->data[i];
	}
	pSeq->data[pos]=data;
	pSeq->sz++;
}

void Erase(PSeqList pSeq, int pos)//删除指定位置元素
{
	int i = 0;
	assert(pSeq != NULL && pos>=0 && pos<pSeq->sz);
	if(pSeq->sz == 0)
	{
		printf("顺序表为空，无法操作！\n");
		return ;
	}
	for(i=pos;i<pSeq->sz-1;i++)
	{
		pSeq->data[i]=pSeq->data[i+1];
	}
	pSeq->sz--;
}

void Remove(PSeqList pSeq, DataType data)//删除指定元素 
{
	int i = 0;
	assert(pSeq != NULL);
	if(pSeq->sz == 0)
	{
		printf("顺序表为空，无法操作！\n");
		return ;
	}
	for(i=0;i<pSeq->sz;i++)
	{
		if(pSeq->data[i]==data)
		{
				break;
		}
	}
	if(i == pSeq->sz)
	{
		printf("要删除的元素不存在！\n");
		return ;
	}
	for(;i<pSeq->sz-1;i++)//接着上面的i用，所以i=i这一句可以省略
	{
		pSeq->data[i]=pSeq->data[i+1];
	}
	pSeq->sz--;
}


void RemoveAll(PSeqList pSeq, DataType data)//删除所有的指定元素 
{
	int i = 0;
	int count = 0;
	assert(pSeq != NULL);
	for(i=0;i<pSeq->sz;i++)
	{
		if(pSeq->data[i] != data)
		{
			pSeq->data[count++]=pSeq->data[i];
		}
	}
	pSeq->sz = count;
}

int Size(PSeqList pSeq)//返回顺序表的大小 
{
	return (pSeq->sz);
}

int Empty(PSeqList pSeq)//判断顺序表是否为空
{
	return pSeq->sz == 0;
}

void BubbleSort(PSeqList pSeq)//冒泡排序 
{
	int i = 0;
	int j = 0;
	//int flag = 0;
	DataType tmp;
	assert(pSeq != NULL);
	for(i=0;i<pSeq->sz-1;i++)
	{
		//flag = 0;
		for(j=0;j<pSeq->sz-1-i;j++)
		{
			if(pSeq->data[j]>pSeq->data[j+1])
			{
			   tmp = pSeq->data[j];
			   pSeq->data[j]=pSeq->data[j+1];
			   pSeq->data[j+1]=tmp;
			  // flag = 1;
			}
		}
		/*if(flag == 0)
			return ;*/
	}
}

int BinarySearch(PSeqList pSeq, DataType data)//二分查找
{
	int left = 0;
	int right = pSeq->sz-1;
	assert(pSeq != NULL);
	while(left<=right)
	{
		int mid = left+(right-left)/2;
		if(pSeq->data[mid]>data)
		{
			right = mid-1;
		}
		else if(pSeq->data[mid]<data)
		{
			left = mid+1;
		}
		else
		{
			return mid;
		}
	}
	return -1;
}

int BinarySearch_R(PSeqList pSeq, int left, int right, DataType data)//二分查找递归写法 
{
	int mid = 0;
	if(left>right)
		return -1;
	mid = left+(right-left)/2;
	if(pSeq->data[mid]<data)
	{
		return BinarySearch_R(pSeq,mid+1,right,data);
	}
	else if(pSeq->data[mid]>data)
	{
		return  BinarySearch_R(pSeq,left,mid-1,data);
	}
	else
		return mid;
}

void SelectSort(PSeqList pSeq)
{
	int i = 0;
	int j = 0;
	DataType tmp;
	assert(pSeq != NULL);
	for(i=0;i<pSeq->sz-1;i++)
	{
		int maxPos = 0;//最大元素坐标
		for(j=1;j<=pSeq->sz-1-i;j++)
		{
		    if(pSeq->data[j]>pSeq->data[maxPos])
		    {
			     maxPos = j;
		    }
		}
		if(maxPos != pSeq->sz-1-i)
		{
			tmp = pSeq->data[maxPos];
			pSeq->data[maxPos]=pSeq->data[pSeq->sz-1-i];
			pSeq->data[pSeq->sz-1-i]=tmp;
		}
	}
}

void SelectSortOP(PSeqList pSeq)
{
	int start = 0;
	int end = pSeq->sz-1;
	assert(pSeq != NULL);
	while(start<end)
	{
		int maxPos = start;
		int minPos = start;
		int i = 0;
		for(i=start+1;i<=end;i++)
		{
			if(pSeq->data[i] > pSeq->data[maxPos])
			{
				maxPos = i;
			}

			if(pSeq->data[i] < pSeq->data[minPos])
			{
				minPos = i;
			}
		}

		if(minPos != start )
		{
			Swap(pSeq->data+minPos,pSeq->data+start);
		}

		if(maxPos == start)
		{
			maxPos = minPos;
		}

		if(maxPos != end)
		{
			Swap(pSeq->data+maxPos,pSeq->data+end);
		}

		start++;
		end--;
	}
}

 void Swap(DataType* px,DataType* py)
 {
	 DataType tmp = *px;
	 *px = *py;
	 *py = tmp;
 }

void PrintSeqList(PSeqList pSeq)//打印
{
	int i = 0;
	assert(pSeq != NULL);
	if(pSeq->sz == 0)
	{
		printf("顺序表为空!\n");
		return ;
	}
	for(i=0 ;i<pSeq->sz;i++)
	{
		printf("%d ",pSeq->data[i]);
	}
	printf("\n");
}




