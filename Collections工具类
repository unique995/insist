Collections工具类：在Collections工具类中很多方法是用于对集合进行操作的，如比较，查找，随机排序等等

1、查找：
T max(Collection<? extends T> coll)                                      --->    根据集合的自然顺序，获取coll集合中的最大元素
T max(Collection<? extends T> coll,Comparator<? super T> comp)           --->   根据指定比较器comp的顺序，获取coll集合中的最大元素
int binarySearch(Lsit<? extends Comparable<? super T>> list,Tkey)        --->   二分法搜索list集合中的指定对象

2、替换：
void fill(List<? super T> list, T obj)                   --->   将list集合中的全部元素替换成指定对象obj
boolean replaceAll(List<T> lsit,T oldVal,T newVal)       --->   使用newVal替换list集合中的oldVal值

3、排序：
void shuffle(List<?> list)                         --->   使用默认随机源对list集合中的元素进行随机排序
void sort(Lsit<T> list)                            --->   根据自然顺序对list集合中的元素进行排序
void sort(List<T> lsit,Comparator<? super T> c)    --->   根据指定比较器c的排序方式对list集合进行排序

4、反转
reverse(List<?> list)         --->   反转list集合中元素的顺序
Comparator reverseOrder()     --->   返回一个比较器，强行逆转了实现Comparable接口的对象的自然顺序

public static void main(String[] args) {
        //List
        List<String> list = new ArrayList<>();
        list.add("Java");
        list.add("C++");
        list.add("Python");
        list.add("PHP");
        
        System.out.println("原始顺序：" + list);
        
        //乱续
//        Collections.shuffle(list);
//        System.out.println("乱续的结果："+list);
        
        //反转
//        Collections.reverse(list);
//        System.out.println("反转的结果："+list);
        
        //填充
//        Collections.fill(list, "--");
//        System.out.println("填充的结果：" + list);
        
        //集合变成线程安全的集合
        //List<String> safeList = Collections.synchronizedList(list);
        
        //集合变成不可变集合
//        list = Collections.unmodifiableList(list);
        //list.add("DS");//UnsupportedOperationException
    }
