abstract class A{
    public A(){   //3.调用父类构造
        this.print(); //4.调用被子类覆写的方法
    }
    public abstract void print();
}
class B extends A{
    private int num = 100;
    public B(int num){//2.调用子类实例化对象
        super();      //3.隐含一行语句，实际先调用父类构造
        this.num = num;
    }
    public void print(){ //5.此时子类对象的属性还没有被初始化
        System.out.println(this.num);//6.对应其数据类型的默认值
    }
}
public class Test{
    public static void main(String[] args) {
        new B(30);//1.实例化子类对象
    }
}

///////////////////////////////////////////////////////////输出为    0



abstract class A{
public void print(){
//空实现，普通方法
}
}
public class Test{
public static void main(String[] args) {
A a = new A() ; // 错误: A是抽象的; 无法实例化
}
}



//////////////内部抽象类
abstract class A{ //此类结构出现几率很低
public abstract void printA() ;
abstract class B {
public abstract void printB() ;
}
}
class X extends A {
public void printA(){}
class Y extends B {
public void printB(){}
}
}
//////////////内部抽象类使用static修饰
abstract class A{ //此类结构出现几率很低
public abstract void printA() ;
static abstract class B {
public abstract void printB() ;
}
}
class X extends A.B {
public void printB(){}
}
